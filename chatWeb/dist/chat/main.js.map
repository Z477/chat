{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/chatbox/chatbox.component.html","webpack:///./src/app/components/chatbox/chatbox.component.sass","webpack:///./src/app/components/chatbox/chatbox.component.ts","webpack:///./src/app/components/homepage/homepage.component.html","webpack:///./src/app/components/homepage/homepage.component.scss","webpack:///./src/app/components/homepage/homepage.component.ts","webpack:///./src/app/service/contacts.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<!--ng-container是个容器，不会渲染到页面里-->\\n<ng-container [ngSwitch]=\\\"curPageType\\\">\\n  <ng-container *ngSwitchCase=\\\"pageTypeEnum.LoginPage\\\">\\n      <div style=\\\"text-align:center\\\">\\n          <h1>\\n            Welcome to Connection!\\n          </h1>\\n        </div>\\n        <span style=\\\"text-align:center\\\">\\n          <!--双向绑定-->\\n          <select [(ngModel)]=\\\"whoLoginId\\\">\\n          <!--循环生成option，this.contacts代表组件”AppComponent“的一个属性-->  \\n            <option *ngFor=\\\"let item of this.contacts\\\" [value]=\\\"item.id\\\">{{item.name}}</option>\\n          </select> \\n          <!--监听button的click事件，一旦发生就调用函数loginClick-->\\n          <button (click)=\\\"loginClick()\\\">login</button>\\n        </span>\\n  </ng-container>\\n  <ng-container *ngSwitchCase=\\\"pageTypeEnum.HomePage\\\">\\n      <app-homepage [whoLoginId]=\\\"whoLoginId\\\"></app-homepage>\\n  </ng-container>\\n</ng-container>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component , OnInit, Input, Output, EventEmitter} from '@angular/core';\nimport { ContactService } from './service/contacts.service';\n\nexport interface Contacts {\n  status: number;\n  reason: string;\n  data: Contact[];\n}\nexport interface Contact {\n  id: number;\n  name: string;\n}\n\nexport interface PostLogin {\n  status: number;\n  reason: string;\n  token: string;\n\n}\n\nexport enum PageType {\n  LoginPage = 'LoginPage',\n  HomePage = 'HomePage',\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  // 组件里不能定义枚举，但可以通过赋值的方式获取枚举型\n  public pageTypeEnum = PageType;\n  public contacts: Contact[] = [];\n  public whoLoginId: string;\n  public curPageType: PageType = PageType.LoginPage;\n\n  // 注入service，只能在构造函数里注入服务\n  public constructor(public contactService: ContactService) {}\n\n  // 当该组件被angular初始化好以后，就会调用钩子函数ngOnInit()\n  // 一般都在钩子函数里去执行自定义的初始化过程， 而不在构造函数里，以防组件没有被初始化完整\n  public ngOnInit(): void {\n    this.contactService.getContacts().then(result => {\n      this.contacts = result.data;\n    }, error => {\n      console.log(error);\n    });\n  }\n\n  public loginClick(): void {\n      this.curPageType = PageType.HomePage;\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { FormsModule } from '@angular/forms';\n\nimport { HttpClientModule, HttpClient, HttpHandler } from '@angular/common/http';\nimport { ContactService } from './service/contacts.service';\nimport { CommonModule } from '@angular/common';\nimport { HomepageComponent } from './components/homepage/homepage.component';\nimport { ChatboxComponent } from './components/chatbox/chatbox.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomepageComponent,\n    ChatboxComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    CommonModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"<div>\\n  <textarea rows=\\\"20\\\" cols=\\\"50\\\" readonly=readonly>\\n  </textarea>\\n  <p>\\n    <b>\\n      <input type=\\\"text\\\" >\\n      <button>send</button>\\n    </b>\\n  </p>\\n</div>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY2hhdGJveC9jaGF0Ym94LmNvbXBvbmVudC5zYXNzIn0= */\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Contact } from '../../app.component';\n\n@Component({\n  selector: 'app-chatbox',\n  templateUrl: './chatbox.component.html',\n  styleUrls: ['./chatbox.component.sass']\n})\nexport class ChatboxComponent implements OnInit {\n\n  @Input()\n  whoTouchId: number;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<p>\\n  user: {{whoLoginName}}\\n</p>\\n<table>\\n    <th>contacts</th>\\n    <tr *ngFor=\\\"let item of this.otherContacts\\\">\\n      <!--()代表事件，有一个$event的输出，但可以不用，比如下面就没有用，而是传入item； []代表输入-->\\n      <td (click)=\\\"contactClick(item)\\\">{{item.name}}</td>\\n    </tr>\\n    <ng-container *ngIf=\\\"whoContact !== undefined\\\">\\n      <app-chatbox [whoTouchId]=\\\"whoContact.id\\\"></app-chatbox>\\n    </ng-container>\\n</table>\\n\"","module.exports = \"app-homepage {\\n  background-color: red; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdXplZS9EZXNrdG9wL3Rvb2wvQW5ndWxhci9jaGF0L3NyYy9hcHAvY29tcG9uZW50cy9ob21lcGFnZS9ob21lcGFnZS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLHFCQUFvQyxFQUFBIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9ob21lcGFnZS9ob21lcGFnZS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImFwcC1ob21lcGFnZXtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMCwgMCwgMSk7XG59Il19 */\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Contact, AppComponent} from '../../app.component';\nimport { ContactService } from '../../service/contacts.service';\n\n@Component({\n  selector: 'app-homepage',\n  templateUrl: './homepage.component.html',\n  styleUrls: ['./homepage.component.scss']\n})\nexport class HomepageComponent implements OnInit {\n\n  @Input()\n  whoLoginId: number;\n  public whoLoginName: string;\n  public otherContacts: Contact[];\n  public whoContact: Contact;\n  constructor(public contactService: ContactService) {  }\n\n  ngOnInit() {\n    // 获取登录用户名\n    this.contactService.getUserName(this.whoLoginId, 'false').then(result => {\n      this.whoLoginName = result.data[0].name;\n    }, error => {\n      console.log(error);\n    });\n\n    // 获取非登录用户名\n    this.contactService.getUserName(this.whoLoginId, 'true').then(result => {\n      this.otherContacts = result.data;\n    }, error => {\n      console.log(error);\n    });\n  }\n    // 点击用户后打开聊天框\n  public contactClick(contact: Contact): void {\n    this.whoContact = contact;\n}\n\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport { Contacts } from '../app.component';\nimport { PostLogin } from '../app.component';\nimport { AppComponent } from '../app.component';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactService {\n\n  public constructor(public http: HttpClient) { }\n\n  public getContacts(): Promise<Contacts> {\n    return this.http.get<Contacts>('http://127.0.0.1:7777/user/userlist').toPromise();\n  }\n\n  public getUserName(whoLoginId: number, reverseFlag: string): Promise<Contacts> {\n\n    return this.http.get<Contacts>(`http://127.0.0.1:7777/user/username?id=${whoLoginId}&reverse=${reverseFlag}`).toPromise();\n  }\n\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}